//= require programs/quotation_search
//= require programs/quotation_create
//= require filter_panel

Ext.define 'QuotationView',
  extend: 'Ext.panel.Panel'
  alias: 'widget.quotation_view'
  border: false
  layout: 'card'#type: 'vbox', align: 'stretch'
  listeners:
    render: (me)->
      btn_create = me.down 'button[name=create]'
      btn_view   = me.down 'button[name=view]'
      chkbox_group_filter = me.down 'checkbox[name=group_by_quotation]'

      chkbox_group_filter.on 'change', (cmp)->
        if cmp.getValue()
          expire = Ext.Date.add new Date(), Ext.Date.DAY, 7
          Ext.util.Cookies.set 'group_by_quotation', true, expire
        else
          Ext.util.Cookies.clear 'group_by_quotation'

        me.grid.getStore().loadPage 1

      btn_create.on 'click', (btn)->
        main_page = me.up 'panel[name=main_page]'
        #close_tool = main_page.down 'tool'
        #close_tool.setVisible false
        btn.setDisabled true
        me.setLoading true
        me.show_form_page btn_create.text, "create", (error)->
          btn.setDisabled false
          me.setLoading false

      btn_view.on 'click', (btn)->
        return if me.grid.getSelectionModel().getSelection().length <= 0
        btn.setDisabled true
        me.setLoading true
        me.show_form_page btn_view.text, "view", (error)->
          btn.setDisabled false
          me.setLoading false

      me.grid.getStore().on 'load', ()-> me.grid.check_btns()
      me.grid.getStore().on 'beforeload', (store)->
        values = me.filter_panel.get_filter_values()
        Ext.apply store.getProxy().extraParams = {method: 'list', group_quotation: chkbox_group_filter.getValue()}
        if Object.keys(values).length > 0
          Ext.apply store.getProxy().extraParams, 
            filter: Ext.JSON.encode values
        true

  get_form: (name, init)->
    me = @
    Ext.create "QuotationCreate",
      init: init
      rest_client: me.rest_client

  save_quotation: (form, callback)->
    me = @
    values = form.getValues()
    unless Ext.isEmpty values.id
      me.setLoading true
      me.rest_client.update values.id, 'quotation', {},
        (res)->
          me.setLoading false
          if res.success
            valid = Ext.valueFrom(res.valid, false)
            ErrorBox.invalid_html res.html unless valid
            callback valid
          else
            callback res.success
      ,
        ()->
          me.setLoading false
          callback false
      ,
        jsonData:
          data: values
    else
      me.setLoading true
      me.rest_client.create 'quotation', {},
        (res)->
          me.setLoading false
          if res.success
            valid = Ext.valueFrom(res.valid, false)
            ErrorBox.invalid_html res.html unless valid
            callback valid
          else
            callback res.success
      ,
        ()->
          me.setLoading false
          callback false
      ,
        jsonData:
          data: values

  show_form_page: (title, name, callback)->
    me = @

    main_page = me.up 'panel[name=main_page]'
    main_page.set_title main_page.getTitle() + " > #{title}"

    form_name = "form"
    form_name += "_#{name}" unless Ext.isEmpty name

    show =(res)->
      form = me.get_form name, res.data  
      n = me.add  
        dockedItems: [
          xtype: 'toolbar'
          dock: 'top'
          items: [
            xtype: 'button'
            text: text_fa_icon 'save', 'Save'
            handler: (btn)->
              return unless form.isValid()
              Ext.Msg.show
                title:'Save?'
                message: "Save Quotation"
                buttons: Ext.Msg.YESNO
                icon: Ext.Msg.QUESTION
                fn: (ans)->
                  if ans == 'yes'
                    me.save_quotation form, (success)->
                      if success
                        main_page.restore_title()
                        me.getLayout().setActiveItem 0
                        me.remove n
                        me.grid.getStore().loadPage 1

          ,
            xtype: 'button'
            text: text_fa_icon 'arrow-left', 'Back'
            handler: (btn)->
              main_page.restore_title()
              me.getLayout().setActiveItem 0
              me.remove n
          ,
            '->'
          ,
            xtype: 'button'
            hidden: Ext.isEmpty(res.data.id)
            text: text_fa_icon 'trash', 'Delete'
            handler: (btn)->
              Ext.Msg.show
                title: "#{btn.text}?"
                message: "Delete this Quotation"
                buttons: Ext.Msg.YESNO
                icon: Ext.Msg.QUESTION
                fn: (ans)->
                  if ans == 'yes'
                    me.setLoading true
                    me.rest_client.destroy res.data.id, 'quotation', {},
                      (res)->
                        me.setLoading false
                        if res.success
                          main_page.restore_title()
                          me.getLayout().setActiveItem 0
                          me.remove n
                          me.grid.getStore().loadPage 1
                    ,
                      ()->
                        me.setLoading false
          ]
        ]
        layout: 'fit'
        items: form

      n

    switch name
      when "create"
        me.rest_client.create form_name, {},
          (res)->
            if res.success
              me.getLayout().setActiveItem show res

            callback res.success
        ,
          ()->
            callback()

      when "view"
        selects = me.grid.getSelectionModel().getSelection()
        return if selects.length <= 0
        me.rest_client.show selects[0].get('uuid'), form_name, {},
          (res)->
            if res.success
              me.getLayout().setActiveItem show res

            callback res.success
        ,
          ()->
            callback()

  initComponent: ->
    me = @ 

    @filter_panel = Ext.create 'FilterPanel',
      region: 'east'
      listeners:
        search: (c, values)->
          me.grid.getStore().loadPage 1, 
            callback: ()-> 
              me.grid.check_btns()

        clear: (c)->
          me.grid.getStore().loadPage 1, 
            callback: ()-> 
              me.grid.check_btns()
           
      cmps: [
        text: 'Quotation No.'
        cmp: xtype: 'x_text', name: 'quotation_no'  
      ,
        text: 'Customer'
        cmp: xtype: 'x_text', name: 'customer'
      ,
        text: 'Create Person'
        cmp: xtype: 'x_text', name: 'created_by'
      ,
        text: 'Issue Date'
        cmp: xtype: 'x_date_range', name: 'issue_date'
      ,
        text: 'Freight Term'
        cmp: xtype: 'x_text', name: 'freight_term'
        #,
        #text: 'Exch. Rate'
        #cmp: xtype: 'x_number', name: 'exchange_rate', format: '0,000.0000'
      ,
        text: 'Item Code'
        cmp: name: 'item_code'
      ,
        text: 'Model'
        cmp: name: 'model'
      ,
        text: 'Sub Code'
        cmp: name: 'sub_code'
      ,
        text: 'Customer Code'
        cmp: name: 'customer_code'
      ,
        text: 'Part Name'
        cmp: name: 'part_name'
        #,
        #text: 'Package Price'
        #cmp: xtype: 'x_number', name: 'part_name'
        #,
        #text: 'Total Price'
        #cmp: xtype: 'x_number', name: 'total_price'
      ,
        text: 'Unit Price'
        cmp: name: 'unit_price'
      ,
        text: 'PO Reference'
        cmp: name: 'po_reference'
      ,
        text: 'Remark'
        cmp: name: 'remark'
      ]

    store = Ext.create 'Ext.data.Store',
      fields: [
        'record_id', 'uuid', 'quotation_no', 
        {type: 'date', name: 'issue_date', dateFormat: "Y-m-d"}, 
        'exchange_rate', 'created_by', 'customer', 'freight_term',
        'item_code', 'sub_code', 
        {type: 'float', name: 'part_price'},
        'po_reference',
        'remark',
        {type: 'float', name: 'package_price'},
        'customer_code',
        'unit_price',
        'part_name',
        'model'
      ]
      autoLoad: true

      proxy:
        type: 'ajax'
        url: me.rest_client.url
        extraParams:
          method: 'list'
        reader:
          type: 'json'
          rootProperty: 'rows'
          totalProperty: 'total'
        listeners:
          exception: (request, result)->
            try
              response = Ext.JSON.decode result.responseText 
              unless response.success
                Ext.create('ErrorBox',
                  message: response.message
                  backtrace: response.backtrace
                  ).show()
            catch e
              Ext.Msg.alert '', result.responseText

    @grid = Ext.create 'Ext.grid.Panel',
      region: 'center'
      flex: 1
      store: store 
      check_btns: ()->
        view_btn = @down 'button[name=view]'
        view_btn.setDisabled !(@getSelectionModel().getSelection().length > 0)

      listeners:
        itemdblclick: ()->
          view_btn = @down 'button[name=view]'
          view_btn.fireEvent 'click', view_btn

        selectionchange: ()-> me.grid.check_btns()
          
      dockedItems: [
        xtype: 'toolbar'
        dock: 'top'
        items: [
          xtype: 'button'
          text: text_fa_icon 'file', 'Create'
          name: 'create'
        ,
          xtype: 'button'
          text: text_fa_icon 'edit', 'View'
          name: 'view'
          disabled: true
        ,
          '->'
        ,
          xtype: 'checkbox'
          name: 'group_by_quotation'
          boxLabel : 'Group By Quotation No.'
          inputValue: true
          checked: if Ext.util.Cookies.get('group_by_quotation') then true else false
        ]
      ,
        xtype: 'pagingtoolbar'
        store: store
        dock: 'bottom'
        displayInfo: true
      ]
      columns: [
        xtype: 'rownumberer'
        width: 45
      ,
        text: 'Quotation No.'
        dataIndex: 'quotation_no'
      ,
        text: 'Customer'
        dataIndex: 'customer'
      ,
        text: 'Create Person'
        dataIndex: 'created_by'
      ,
        text: 'Issue Date'
        dataIndex: 'issue_date'
        renderer: Ext.util.Format.dateRenderer('d/m/Y')
      ,
        text: 'Freight Term'
        dataIndex: 'freight_term'
      ,
        text: 'Exch.Rate'
        dataIndex: 'exchange_rate'
        align: 'right'
        renderer: Ext.util.Format.numberRenderer('0,000.0000')
      ,
        text: 'Item Code'
        dataIndex: 'item_code'
      ,
        text: 'Model'
        dataIndex: 'model'
      ,
        text: 'Sub Code'
        dataIndex: 'sub_code'
      ,
        text: 'Customer code'
        dataIndex: 'customer_code'
      ,
        text: 'Part Name'
        dataIndex: 'part_name'
      ,
        text: 'Part Price'
        dataIndex: 'part_price'
        align: 'right'
        renderer: Ext.util.Format.numberRenderer('0,000.0000')
      ,
        text: 'Package Price'
        dataIndex: 'package_price'
        align: 'right'
        renderer: Ext.util.Format.numberRenderer('0,000.0000')
      ,
        text: 'Total Price'
        dataIndex: 'total_price'
        align: 'right'
        renderer: Ext.util.Format.numberRenderer('0,000.0000')
      ,
        text: 'Unit Price'
        dataIndex: 'unit_price'
        align: 'right'
      ,
        text: 'PO Reference'
        dataIndex: 'po_reference'
      ,
        text: 'Remark'
        dataIndex: 'remark'
      ,
        text: 'App.File'
        dataIndex: 'total_approve_file'
        align: 'right'
        renderer: Ext.util.Format.numberRenderer('0,000')
      ,
        text: 'Calc.File'
        dataIndex: 'total_calculate_file'
        align: 'right'
        renderer: Ext.util.Format.numberRenderer('0,000')
      ]

    @filter_form = Ext.create 'Ext.form.Panel',
      border: false
      autoScroll: true 
      layout: type: 'vbox', align: 'stretch'

    @items = [ 
      xtype: 'panel'
      border: false
      layout: 'border'
      items: [
        @grid
      ,
        @filter_panel
      ]
    ]
    @callParent arguments


Ext.define 'Program.quotation',
  extend: 'MainView'
  get_url: -> '<%= Pathname.new(__FILE__).to_s.split("javascripts")[1].to_s.split(".")[0] %>'
  get_title: -> 'Quotation'
  get_view: (init, fn)->
    fn Ext.create 'QuotationView', rest_client: @rest_client
