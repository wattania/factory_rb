Ext.define 'QuotationItemModel',
  extend: 'Ext.data.Model'
  fields: [
    type: 'string', name: 'item_code'
    type: 'string', name: 'ref_model_uuid'
    type: 'string', name: 'record_id'
    type: 'string', name: 'sub_code'
    type: 'string', name: 'ref_part_name_uuid'
    type: 'string', name: 'customer_code'
    type: 'string', name: 'ref_unit_price_uuid'
    type: 'float',  name: 'package_price'
    type: 'float',  name: 'total_price'
    type: 'integer', name: 'row_no'
    type: 'string', name: 'file_hash'
  ]
  is_excel: ()-> !(Ext.isEmpty(@get 'file_hash') or @get('file_hash') == 'edit')
  get_price: (field)->
    ret = @get field
    unless Ext.isNumeric ret
      0 
    else
      parseFloat(parseFloat(ret).toFixed(2))

  cal_total_price: ()->
    ret = @get_price('part_price') + @get_price('package_price')
    @set 'total_price', ret
    @commit()
    ret

Ext.define 'QuotationCreate',
  extend: 'Ext.form.Panel'
  border: false
  layout: type: 'vbox', align: 'stretch'
  listeners:
    render: (me)->
      init = Ext.valueFrom me.initialConfig.init, {}

      upload_quotation_item = me.down 'upload5[name=quotation_item]'
      btn_item_remove = me.down 'button[name=remove]'
      btn_item_add    = me.down 'button[name=add]'

      me.grid.on 'beforeedit', (editor, context, eOpts)->
        if context.record.is_excel()
          btn_item_remove.setDisabled false
          upload_quotation_item.setDisabled false
          btn_item_add.setDisabled false
          false
        else
          if context.field in ['total_price']
            btn_item_remove.setDisabled false
            upload_quotation_item.setDisabled false
            btn_item_add.setDisabled false
            false
          else
            btn_item_remove.setDisabled true
            btn_item_add.setDisabled true
            upload_quotation_item.setDisabled true
            true

      me.grid.on 'edit', (editor, context)-> 
        btn_item_remove.setDisabled false
        btn_item_add.setDisabled false
        upload_quotation_item.setDisabled false

        context.record.commit()
        if context.field in ['part_price', 'package_price']
          context.record.cal_total_price()

      btn_item_add.on 'click', (btn)->
        store = me.grid.getStore()
        btn.setDisabled true
        btn.setText text_fa_icon 'refresh', '', 'fa-spin'

        me.rest_client.create 'add_item', {uuid: init.uuid},
          (res)->
            btn.setDisabled false
            btn.setText text_fa_icon 'plus', ''
            if res.success
              store.removeAll()
              recs = store.add res.rows
              me.grid.getSelectionModel().select recs[0]
        ,
          ()->
            btn.setDisabled false
            btn.setText text_fa_icon 'plus', ''
        ,
          jsonData:
            records: store.get_new_items()

      btn_item_remove.on 'click', (btn)->
        selects = me.grid.getSelectionModel().getSelection()
        if selects.length <= 0
          btn.setDisabled true
        else
          if selects[0].is_excel()

            Ext.Msg.show
              title:'Remove All Excel datas?'
              message: "Total #{me.grid.getTotalExcel()}"
              buttons: Ext.Msg.YESNO
              icon: Ext.Msg.QUESTION
              fn: (ans)->
                if ans == 'yes'

                  btn.setDisabled true
                  me.grid.setLoading true
                  me.rest_client.update init.uuid, 'remove_excel_items', {},
                    (res)->
                      btn.setDisabled false
                      me.grid.setLoading false
                      if res.success
                        me.grid.getStore().removeAll()
                        me.grid.getStore().add res.rows
                        me.grid.chek_btns()
                  , 
                    ()->
                      btn.setDisabled false
                      me.grid.setLoading false
                  ,
                    jsonData:
                      records: me.grid.getStore().get_new_items()

          else
            Ext.Msg.show
              title:'Remove Selected?'
              message: "Total #{selects.length}"
              buttons: Ext.Msg.YESNO
              icon: Ext.Msg.QUESTION
              fn: (ans)->
                if ans == 'yes'
                  me.grid.getStore().remove selects

  getValues: ()->
    ret = @callParent arguments
    ret.edit_items = @grid.getStore().get_edit_items()
    ret.new_items  = @grid.getStore().get_new_items()
    ret
  load_grid_file_items: (uuid, name)->
    me = @
    me.rest_client.show uuid, name, {},
      (res)->
        if res.success
          grid = me.file_upload_panel.down "grid[name=#{name}]"
          grid.getStore().removeAll()
          grid.getStore().add res.rows
    ,
      ()->
  load_grid_items: (uuid)->
    me = @
    me.grid.setLoading true
    me.rest_client.index 'item_data', { uuid: uuid },
      (res)->
        me.grid.getStore().removeAll()
        me.grid.getStore().add res.rows
        me.grid.setLoading false
    ,
      ()->
        me.grid.setLoading false

  get_upload_grid: (name, title, init)->
    me = @

    xtype: 'grid'
    listeners:
      render: ()->
        if init.uuid
          me.load_grid_file_items init.uuid, name

    store: Ext.create 'Ext.data.Store',
      fields: [
        type: 'string', name: 'record_id'
        type: 'string', name: 'hash'
        type: 'string', name: 'filename'
        type: 'string', name: 'uploaded'
      ]
    columns: [
      xtype:'actioncolumn'
      width: 60
      items: [
        icon: ProgHelper.img_url "document-download1.gif"
        tooltip: 'Download'
        handler: (grid, rowIndex, colIndex)->
          rec = grid.getStore().getAt rowIndex
          DownloadBox.get rec.get("hash"), rec.get('filename'), ''
          
      ,
        icon: ProgHelper.img_url "space.png"
      ,
        icon: ProgHelper.img_url "file_delete.png"
        tooltip: 'Delete'
        handler: (grid, rowIndex, colIndex)->
          rec = grid.getStore().getAt rowIndex

          Ext.Msg.show
            title:'Delete File?'
            message: rec.get 'filename'
            buttons: Ext.Msg.YESNO
            icon: Ext.Msg.QUESTION
            fn: (btn)->
              if btn == 'yes'
                me.rest_client.destroy rec.get('record_id'), name, {},
                  (res)->
                    if res.success
                      me.load_grid_file_items init.uuid, name
                       
      ]
    ,
      text: 'Filename'
      dataIndex: 'filename'
      flex: 1
    ,
      text: 'Uploaded'
      dataIndex: 'uploaded'
      width: 150

    ]
    name: name
    title: title
    flex: 1
    dockedItems: [
      xtype: 'toolbar'
      dock: 'top'
      items: [ 
        xtype: 'upload5'
        extra_params: uuid: init.uuid
        text: text_fa_icon 'upload', ''
        callback: (err, data)->
          return if err 
          me.rest_client.update data.hash, "store_#{name}", {},
            (res)->
              if res.success
                me.rest_client.show init.uuid, name, {},
                  (res)->
                    if res.success
                      grid = me.file_upload_panel.down "grid[name=#{name}]"
                      grid.getStore().removeAll()
                      grid.getStore().add res.rows
                ,
                  ()->
          ,
            ()->
          ,
            jsonData:
              uuid: init.uuid
              filename: data.filename
      ]
    ]

  initComponent: ->
    me = @

    init = Ext.valueFrom me.initialConfig.init, {}
    console.log init
    form = FormHelper.layout
      row: 2
      col: 6
      items: [
        xtype: 'hidden'
        value: init.uuid
        name: 'uuid'
      ,
        xtype: 'hidden'
        name: 'id'
        value: init.id
      ,
        xtype: 'hidden'
        name: 'lock_version'
        value: init.lock_version
      ,
        type: 'text'
        captions: ['Quotation No.']
        pos: [1, 1]
        name: 'quotation_no'
        is_require: if init.id then false else true
        value: init.quotation_no
        readOnly: if init.id then true else false
      ,
        xtype: 'combo'
        pos: [1, 2]
        fieldLabel: 'Customer'
        name: 'customer'
        value: init.ref_customer_uuid
        forceSelection: true
        labelAlign: 'top'
        store: Ext.create 'Ext.data.Store',
          fields: ['uuid', 'cust_name']
          data: init.customers
        queryMode: 'local'
        displayField: 'display_name'
        valueField: 'uuid'
      ,
        type: 'text'
        value: init.created_by
        captions: ['Create Person']
        pos: [1, 6]
        readOnly: true
        value: "#{USER_FIRST_NAME} #{USER_LAST_NAME}"
      ,
        type: 'date'
        value: init.issue_date
        captions: ['Issue Date']
        pos: [1, 4]
        name: 'issue_date'
      ,
        xtype: 'combo'
        value: init.ref_freight_term_uuid
        pos: [1, 5]
        name: 'freight_term'
        fieldLabel: 'Freight Term'
        forceSelection: true
        labelAlign: 'top'
        store: Ext.create 'Ext.data.Store',
          fields: ['uuid', 'freight_term']
          data: init.freight_terms
        queryMode: 'local'
        displayField: 'display_name'
        valueField: 'uuid'
      ,
        type: 'number'
        value: init.exchange_rate
        format: '0,000.0000'
        name: 'exchange_rate'
        captions: ['Exchange Rate']
        pos: [1, 3]
      ]

    @file_upload_panel = Ext.create 'Ext.panel.Panel',
      height: 200
      margin: '0 10 10 10'
      layout: type: 'hbox', align: 'stretch'
      border: false
      items: [
        @get_upload_grid 'approve_file', 'Approve File', init
      ,
        @get_upload_grid 'calculation_file', 'Calculation File', init
      ]

    ref_conf =(data)->
      store: Ext.create 'Ext.data.Store',
        fields: ['display_name', 'uuid']
        data: data
      forceSelection: true
      queryMode: 'local'
      displayField: 'display_name'
      valueField: 'uuid'

    ref_render=(v, ref)->
      ret = (Ext.Array.filter ref, (e)-> e.uuid == v)[0]
      unless Ext.isEmpty ret
        ret.display_name
      else
        v

    @grid = Ext.create 'Ext.grid.Panel',
      getTotalExcel: ()->
        store = @getStore()
        total = 0
        store.each (record)-> total += 1 if record.is_excel()
        total
      chek_btns: ()->
        remove_btn = @down 'button[name=remove]'
        selects = @getSelectionModel().getSelection()
        if selects.length > 0
          hash = selects[0].get 'file_hash'
          if Ext.isEmpty(hash) or (hash == 'edit')
            remove_btn.setDisabled false
            remove_btn.setText text_fa_icon 'times', ''
          else
            remove_btn.setDisabled false
            remove_btn.setText text_fa_icon 'times', "Remove Excel (#{@getTotalExcel()})"
        else
          remove_btn.setText text_fa_icon 'times', ''
          remove_btn.setDisabled true

      flex: 1
      listeners:
        selectionchange: ()-> @chek_btns()
        render: ()->
          if init.uuid
            me.load_grid_items init.uuid

      margin: '0 10 10 10'
      title: 'Details'
      plugins: ptype: 'cellediting', clicksToEdit: 1
      store: Ext.create 'Ext.data.Store',
        model: 'QuotationItemModel'  
        listeners:
          load: ()-> me.grid.check_btns() 
        __get_items: (type)->
          ret = [] 
          store = @
          @each (record)-> 
            rec = null
            switch type
              when 'edit'
                rec = record if record.get('file_hash') == 'edit'
              when 'new'
                rec = record if Ext.isEmpty(record.get 'file_hash')

            unless Ext.isEmpty rec 
              ret.push Ext.apply record.data, { row_no: (store.indexOf(record) + 1)}

          ret
        get_edit_items: ()->@__get_items 'edit'
        get_new_items: ()-> @__get_items 'new'
      dockedItems: [
        xtype: 'toolbar'
        dock: 'top'
        items: [
          xtype: 'button'
          text: text_fa_icon 'plus', ''
          name: 'add'
        ,
          xtype: 'upload5'
          name: 'quotation_item'
          width: 30
          extra_params:
            quotation_uuid: init.uuid
          text: text_fa_icon 'upload', ''

          callback: (err, data)->
            return if err
            
            me.grid.setLoading true
            me.rest_client.update data.hash, "process_file", {},
              (response)->
                me.grid.setLoading false
                if response.success
                  unless response.valid
                    ErrorBox.invalid_html response.html
                    ###
                    Ext.create('Ext.window.Window',
                      layout: 'fit'
                      width: 600
                      height: 400
                      modal: true
                      items: 
                        xtype: 'htmleditor'
                        name: 'html_logger' 
                        submitValue: false
                        border: false
                        value: response.html
                        listeners:
                          render: ()->
                            @getToolbar().hide()
                            @setReadOnly true
                    ).show()
                    ###
                  else
                    me.grid.setLoading true
                    me.rest_client.index 'item_data', { uuid: init.uuid },
                      (res)->
                        store = me.grid.getStore()
                        hash_records = []
                        store.each (rec)->
                          hash = rec.get 'file_hash'
                          if Ext.isEmpty(hash) or hash == 'edit'
                          else
                            hash_records.push rec

                        store.remove hash_records if hash_records.length > 0
                        #me.grid.getStore().removeAll()
                        me.grid.getStore().add res.rows
                        me.grid.setLoading false
                    ,
                      ()->
                        me.grid.setLoading false

            ,
              ()->
                me.grid.setLoading false
            ,
              jsonData:
                quotation_uuid: init.uuid
        ,
          xtype: 'button'
          text: text_fa_icon 'times', ''
          disabled: true
          name: 'remove'
        , 
          '->'
        ,
          xtype: 'button'
          #icon: ProgHelper.img_url "Download-icon.png"
          text: text_fa_icon 'download', 'Download'
          tooltip: 'Download'
          handler: ()->
        ]
      ]
      columns: [
        xtype: 'rownumberer'
        width: 45
      ,
        text: ''
        width: 30
        dataIndex: 'row_no'
        align: 'center'
        renderer: (v, meta, record)->
          switch record.get('file_hash')
            when "edit"
              "<font color=blue><b>" + (text_fa_icon 'edit', '') + "</b></font>"
              (text_fa_icon 'edit', '')
            else
              if Ext.isEmpty record.get('file_hash')
                ''
              else
                "<font color=green><b>" + (text_fa_icon 'file-excel-o', '') + "</b></font>"
      ,
        text: 'Item Code'
        dataIndex: 'item_code'
        width: 100
        editor: xtype: 'textfield'
      ,
        text: 'Model'
        dataIndex: 'ref_model_uuid'
        width: 90
        editor: Ext.apply {xtype: 'combo'}, ref_conf(init.models)
        renderer: (v)->
          ref_render v, init.models
      ,
        text: 'Sub Code'
        width: 90
        dataIndex: 'sub_code'
        editor: xtype: 'textfield'
      ,
        text: 'Customer Code'
        width: 120
        dataIndex: 'customer_code'
        editor: xtype: 'textfield'
      ,
        text: 'Part Name'
        dataIndex: 'ref_part_name_uuid'
        width: 100
        editor: Ext.apply {xtype: 'combo'}, ref_conf(init.part_names)
        renderer: (v)->
          ref_render v, init.part_names
      ,
        text: 'Part Price'
        dataIndex: 'part_price'
        align: 'right'
        width: 120
        editor: xtype: 'x_number'
        renderer: Ext.util.Format.numberRenderer('0,000.00')
      ,
        text: 'Package Price'
        dataIndex: 'package_price'
        align: 'right'
        width: 120
        editor: xtype: 'x_number'
        renderer: Ext.util.Format.numberRenderer('0,000.00')
      ,
        text: 'Total Price'
        dataIndex: 'total_price'
        align: 'right'
        width: 120
        renderer: Ext.util.Format.numberRenderer('0,000.00')
      ,
        text: 'Unit Price'
        dataIndex: 'ref_unit_price_uuid'
        align: 'center'
        width: 80
        editor: Ext.apply {xtype: 'combo'}, ref_conf(init.unit_prices)
        renderer: (v)->
          ref_render v, init.unit_prices
      ,
        text: 'PO Reference'
        width: 120
        dataIndex: 'po_reference'
        editor: xtype: 'textfield'
      ,
        text: 'Remark'
        dataIndex: 'remark'
        width: 200
        editor: xtype: 'textfield'
      ]
 

    @items = [ 
      form 
    ,
      @grid
    ,
      @file_upload_panel
      
    ]
    @callParent arguments